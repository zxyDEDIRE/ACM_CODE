贪婪技术的基本思想是，在每一步决策中，都选择当前最优的解，希望最终得到全局最优解。贪婪算法通常具有简单、高效的特点，但并不总是能够得到全局最优解。

贪婪技术和动态规划都可以用来求解最优化问题。它们各自适用的情况不同。

贪婪技术适用于具有贪心选择性质和最优子结构性质的问题。也就是说，通过局部最优选择能够产生全局最优解，并且原问题的最优解包含子问题的最优解。动态规划适用于具有重叠子问题和最优子结构性质的问题。也就是说，原问题可以分解为若干个子问题，并且子问题之间存在重叠，可以通过保存已经求解过的子问题来避免重复计算。


在学习贪心以及dij算法中遇到的问题和获取的心得

在学习贪心算法和Dijkstra算法时，可能会遇到一些问题。例如，如何判断一个问题是否适用于贪心算法，以及如何设计贪心策略等。此外，在实现Dijkstra算法时，可能会遇到一些细节问题，例如如何正确地使用优先队列等。


Dijkstra算法的时间效率取决于具体实现方式。最简单的实现方式是使用数组来维护每个顶点到源点的最短距离，每次从未确定最短距离的顶点中选择一个距离最小的顶点进行松弛操作。这种实现方式的时间复杂度为O(n^2)。如果使用优先队列来维护每个顶点到源点的最短距离，则可以将时间复杂度降低到O((m+n)logn)。


Prim算法的时间效率也取决于具体实现方式。最简单的实现方式是使用数组来维护每个顶点到已确定最小生成树的顶点集合的最短距离，每次从未确定的顶点中选择一个距离最小的顶点加入最小生成树。这种实现方式的时间复杂度为O(n^2)。如果使用优先队列来维护每个顶点到已确定最小生成树的顶点集合的最短距离，则可以将时间复杂度降低到O((m+n)logn).

总之，Prim算法的时间效率取决于具体实现方式，不同实现方式对应不同的时间复杂度。